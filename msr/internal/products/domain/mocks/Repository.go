// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "go-web-service/internal/products/domain"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *Repository) GetAll(ctx context.Context) ([]domain.Produtos, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Produtos
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Produtos); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Produtos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id
func (_m *Repository) GetOne(id int) (domain.Produtos, error) {
	ret := _m.Called(id)

	var r0 domain.Produtos
	if rf, ok := ret.Get(0).(func(int) domain.Produtos); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Produtos)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: produto
func (_m *Repository) Store(produto domain.Produtos) (domain.Produtos, error) {
	ret := _m.Called(produto)

	var r0 domain.Produtos
	if rf, ok := ret.Get(0).(func(domain.Produtos) domain.Produtos); ok {
		r0 = rf(produto)
	} else {
		r0 = ret.Get(0).(domain.Produtos)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Produtos) error); ok {
		r1 = rf(produto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: produto
func (_m *Repository) Update(produto domain.Produtos) (domain.Produtos, error) {
	ret := _m.Called(produto)

	var r0 domain.Produtos
	if rf, ok := ret.Get(0).(func(domain.Produtos) domain.Produtos); ok {
		r0 = rf(produto)
	} else {
		r0 = ret.Get(0).(domain.Produtos)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Produtos) error); ok {
		r1 = rf(produto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateName provides a mock function with given fields: id, name
func (_m *Repository) UpdateName(id int, name string) (string, error) {
	ret := _m.Called(id, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, string) string); ok {
		r0 = rf(id, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
